{"version":3,"sources":["components/Notes/Note.module.css","components/Pin-Section/Pinner.module.css","components/Notes/AddNote.module.css","components/Layout/Header.module.css","components/Notes/NotesList.module.css","components/Layout/Search.module.css","store/note-context.jsx","components/Notes/Note.jsx","components/Pin-Section/Pinner.jsx","components/Notes/NotesList.jsx","components/Layout/Search.jsx","components/Layout/Header.jsx","components/Notes/AddNote.jsx","App.js","store/NoteProvider.jsx","index.js"],"names":["module","exports","noteState","notes","pinnedNotes","unpinnedNotes","searchText","setNotes","addNote","text","deleteNote","id","pinNote","NoteContext","React","createContext","Note","props","noteCtx","useContext","className","classes","note","onClick","pin","footer","date","removeNote","delete","size","Pinner","darkMode","console","log","Fragment","header","dark","map","item","divider","NotesList","filterText","filteredNotes","filter","toLocaleLowerCase","includes","Search","onFilter","search","onChange","event","target","value","type","placeholder","Header","onModeChange","button","AddNote","useState","noteText","setNoteText","rows","cols","length","save","trim","App","setFilterText","setDarkMode","useEffect","savedNotes","JSON","parse","localStorage","getItem","setItem","stringify","prevMode","nanoid","pinned","defaultNoteState","noteReducer","state","action","Date","updatedNotes","toLocaleDateString","pinnedNoteIndex","findIndex","pinnedNote","newNoteState","NoteProvider","useReducer","dispatchNoteAction","noteContext","Provider","children","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5fb9c046.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"note\":\"Note_note__3Il9m\",\"footer\":\"Note_footer__2KuI_\",\"delete\":\"Note_delete__2UG9N\",\"pin\":\"Note_pin__1uVBU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Pinner_header__2f1My\",\"dark\":\"Pinner_dark__3d6qu\",\"divider\":\"Pinner_divider__3XU7V\",\"notes\":\"Pinner_notes__2J1DB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"note\":\"AddNote_note__23vik\",\"footer\":\"AddNote_footer__2S0d1\",\"save\":\"AddNote_save__gSVbG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Header_button__1uGRG\",\"dark\":\"Header_dark__2lOj3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notes\":\"NotesList_notes__1KBJw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"Search_search__-4JmB\"};","import React from \"react\";\n\nconst noteState = {\n  notes: [],\n  pinnedNotes: [],\n  unpinnedNotes: [],\n  searchText: \"\",\n  setNotes: (notes) => {},\n  addNote: (text) => {},\n  deleteNote: (id) => {},\n  pinNote: (id) => {},\n};\n\nconst NoteContext = React.createContext(noteState);\n\nexport default NoteContext;\n","import { useContext } from \"react\";\nimport { MdDeleteForever } from \"react-icons/md\";\nimport { AiTwotonePushpin } from \"react-icons/ai\";\nimport NoteContext from \"../../store/note-context\";\nimport classes from \"../Notes/Note.module.css\";\n\nconst Note = (props) => {\n  const noteCtx = useContext(NoteContext);\n\n  const onDelete = (id) => {\n    return noteCtx.removeNote(id);\n  };\n\n  const onPin = (id) => {\n    return noteCtx.pinNote(id);\n  };\n\n  return (\n    <div className={classes.note}>\n      <AiTwotonePushpin\n        onClick={() => onPin(props.id)}\n        className={classes.pin}\n      />\n      <span>{props.text}</span>\n      <div className={classes.footer}>\n        <small>{props.date}</small>\n        <MdDeleteForever\n          onClick={() => onDelete(props.id)}\n          className={classes.delete}\n          size=\"1.3em\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Note;\n","import React, { useContext } from \"react\";\nimport { AiTwotonePushpin } from \"react-icons/ai\";\nimport Note from \"../Notes/Note\";\nimport NoteContext from \"../../store/note-context\";\nimport classes from \"../Pin-Section/Pinner.module.css\";\n\nconst Pinner = ({ darkMode }) => {\n  console.log(\"PINNER RENDER\");\n  const noteCtx = useContext(NoteContext);\n  return (\n    <React.Fragment>\n      <h2 className={`${classes.header} ${darkMode ? classes.dark : \"\"}`}>\n        <AiTwotonePushpin />\n        Pinned Notes\n      </h2>\n      <div className={classes.notes}>\n        {noteCtx.pinnedNotes.map((item) => {\n          return (\n            <Note\n              //onDelete={onDelete}\n              key={item.id}\n              id={item.id}\n              text={item.text}\n              date={item.date}\n            ></Note>\n          );\n        })}\n      </div>\n      <hr className={classes.divider} />\n    </React.Fragment>\n  );\n};\n\nexport default Pinner;\n","import Note from \"./Note\";\nimport React, { useContext } from \"react\";\nimport NoteContext from \"../../store/note-context\";\nimport Pinner from \"../Pin-Section/Pinner\";\nimport classes from \"../Notes/NotesList.module.css\";\n\nconst NotesList = ({ filterText, darkMode }) => {\n  console.log(\"NOTES LIST RENDER\");\n\n  const noteCtx = useContext(NoteContext);\n\n  const filteredNotes = noteCtx.unpinnedNotes.filter((note) => {\n    return note.text.toLocaleLowerCase().includes(filterText);\n  });\n\n  return (\n    <React.Fragment>\n      <Pinner darkMode={darkMode} />\n      <div className={classes.notes}>\n        {filteredNotes.map((item) => {\n          return (\n            <Note\n              //onDelete={onDelete}\n              key={item.id}\n              id={item.id}\n              text={item.text}\n              date={item.date}\n            ></Note>\n          );\n        })}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default NotesList;\n","import React from \"react\";\nimport { MdSearch } from \"react-icons/md\";\nimport classes from \"../Layout/Search.module.css\";\n\nconst Search = ({ onFilter }) => {\n  return (\n    <div className={classes.search}>\n      <MdSearch size=\"1.3rem\"></MdSearch>\n      <input\n        onChange={(event) => onFilter(event.target.value)}\n        type=\"text\"\n        placeholder=\"type to search...\"\n      ></input>\n    </div>\n  );\n};\n\nexport default Search;\n","import classes from \"../Layout/Header.module.css\";\n\nconst Header = ({ onModeChange, darkMode }) => {\n  return (\n    <header>\n      <h1 className={darkMode ? classes.dark : \"\"}>Notes</h1>\n      <button className={classes.button} onClick={onModeChange}>\n        {darkMode ? \"Brigth Mode\" : \"Dark Mode\"}\n      </button>\n    </header>\n  );\n};\n\nexport default Header;\n","import { useState, useContext } from \"react\";\nimport NoteContext from \"../../store/note-context\";\nimport classes from \"../Notes/AddNote.module.css\";\n\nconst AddNote = () => {\n  const [noteText, setNoteText] = useState(\"\");\n  const CharacterLimit = 200;\n\n  const noteCtx = useContext(NoteContext);\n\n  const handleChange = (event) => {\n    if (CharacterLimit - event.target.value.length >= 0) {\n      setNoteText(event.target.value);\n    }\n  };\n  const handleClick = () => {\n    if (noteText.trim().length > 0) {\n      noteCtx.addNote(noteText);\n      setNoteText(\"\");\n    }\n  };\n\n  return (\n    <div className={classes.note}>\n      <textarea\n        rows=\"8\"\n        cols=\"10\"\n        placeholder=\"Type to add a note...\"\n        onChange={handleChange}\n        value={noteText}\n      ></textarea>\n      <div className={classes.footer}>\n        <small>{CharacterLimit - noteText.length} remaining</small>\n        <button className={classes.save} onClick={handleClick}>\n          Save\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default AddNote;\n","import NotesList from \"./components/Notes/NotesList\";\nimport React, { useContext, useEffect, useState } from \"react\";\n//\nimport Search from \"./components/Layout/Search\";\nimport Header from \"./components/Layout/Header\";\nimport AddNote from \"./components/Notes/AddNote\";\nimport NoteContext from \"./store/note-context\";\n\nfunction App() {\n  const [filterText, setFilterText] = useState(\"\");\n  const [darkMode, setDarkMode] = useState(true);\n\n  const noteCtx = useContext(NoteContext);\n\n  // receive data from local storage of the browser\n  useEffect(() => {\n    const savedNotes = JSON.parse(localStorage.getItem(\"react-notes-app-data\"));\n\n    if (savedNotes) {\n      noteCtx.setNotes(savedNotes);\n    }\n  }, []);\n\n  // save notes to the local storage\n  useEffect(() => {\n    localStorage.setItem(\"react-notes-app-data\", JSON.stringify(noteCtx.notes));\n  }, [noteCtx.notes]);\n\n  const changeMode = () => {\n    setDarkMode((prevMode) => !prevMode);\n  };\n\n  const onFilter = (text) => {\n    setFilterText(text);\n  };\n\n  return (\n    <div className={`${darkMode ? \"dark-mode\" : \"\"}`}>\n      <div className=\"container\">\n        <Header darkMode={darkMode} onModeChange={changeMode} />\n        <Search onFilter={onFilter} />\n        <AddNote />\n        <NotesList filterText={filterText} darkMode={darkMode} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import NoteContext from \"./note-context\";\nimport React, { useReducer } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nconst notes = [\n  {\n    id: nanoid(),\n    text: \"New bucket list item: Hike to Zugspitze !\",\n    date: \"15/04/2021\",\n    pinned: false,\n  },\n  {\n    id: nanoid(),\n    text: \"Reading suggestion: Neil Gaiman - American Gods!\",\n    date: \"15/04/2021\",\n    pinned: false,\n  },\n  {\n    id: nanoid(),\n    text: \"Don't forget to buy milk!!!!\",\n    date: \"19/04/2021\",\n    pinned: true,\n  },\n  {\n    id: nanoid(),\n    text: \"Math Homework on Friday!!\",\n    date: \"15/04/2021\",\n    pinned: true,\n  },\n  {\n    id: nanoid(),\n    text: \"June's birthday on next week!\",\n    date: \"19/04/2021\",\n    pinned: true,\n  },\n];\n\nconst defaultNoteState = {\n  notes: notes,\n  pinnedNotes: notes.filter((note) => {\n    return note.pinned === true;\n  }),\n  unpinnedNotes: notes.filter((note) => {\n    return note.pinned === false;\n  }),\n};\n\nconst noteReducer = (state, action) => {\n  if (action.type === \"SET\") {\n    return {\n      notes: action.item,\n      pinnedNotes: action.item.filter((note) => {\n        return note.pinned === true;\n      }),\n      unpinnedNotes: action.item.filter((note) => {\n        return note.pinned === false;\n      }),\n    };\n  } else if (action.type === \"ADD\") {\n    const date = new Date();\n    const updatedNotes = [\n      {\n        id: nanoid(),\n        text: action.item,\n        date: date.toLocaleDateString(),\n        pinned: false,\n      },\n      ...state.notes,\n    ];\n\n    return {\n      notes: updatedNotes,\n      pinnedNotes: state.pinnedNotes,\n      unpinnedNotes: updatedNotes.filter((note) => {\n        return note.pinned === false;\n      }),\n    };\n  } else if (action.type === \"REMOVE\") {\n    const updatedNotes = state.notes.filter((note) => {\n      return note.id !== action.id;\n    });\n    return {\n      notes: updatedNotes,\n      pinnedNotes: updatedNotes.filter((note) => {\n        return note.pinned === true;\n      }),\n      unpinnedNotes: updatedNotes.filter((note) => {\n        return note.pinned === false;\n      }),\n    };\n  } else if (action.type === \"PIN\") {\n    console.log(\"Pin function activated\");\n    const pinnedNoteIndex = state.notes.findIndex((note) => {\n      return note.id === action.id;\n    });\n    let updatedNotes = [...state.notes];\n    const pinnedNote = state.notes[pinnedNoteIndex];\n\n    const newNoteState = { ...pinnedNote, pinned: !pinnedNote.pinned };\n    updatedNotes[pinnedNoteIndex] = newNoteState;\n\n    return {\n      notes: updatedNotes,\n      pinnedNotes: updatedNotes.filter((note) => {\n        return note.pinned === true;\n      }),\n      unpinnedNotes: updatedNotes.filter((note) => {\n        return note.pinned === false;\n      }),\n    };\n  }\n\n  return defaultNoteState;\n};\n\nconst NoteProvider = (props) => {\n  const [noteState, dispatchNoteAction] = useReducer(\n    noteReducer,\n    defaultNoteState\n  );\n\n  const setNotes = (notes) => {\n    dispatchNoteAction({ type: \"SET\", item: notes });\n  };\n\n  const addNote = (text) => {\n    dispatchNoteAction({ type: \"ADD\", item: text });\n  };\n\n  const removeNote = (id) => {\n    dispatchNoteAction({ type: \"REMOVE\", id: id });\n  };\n\n  const pinNote = (id) => {\n    dispatchNoteAction({ type: \"PIN\", id: id });\n  };\n\n  const noteContext = {\n    notes: noteState.notes,\n    pinnedNotes: noteState.pinnedNotes,\n    unpinnedNotes: noteState.unpinnedNotes,\n    setNotes: setNotes,\n    addNote: addNote,\n    removeNote: removeNote,\n    pinNote: pinNote,\n  };\n\n  return (\n    <NoteContext.Provider value={noteContext}>\n      {props.children}\n    </NoteContext.Provider>\n  );\n};\n\nexport default NoteProvider;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport NoteProvider from \"./store/NoteProvider\";\n\nReactDOM.render(\n  <NoteProvider>\n    <App />\n  </NoteProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}